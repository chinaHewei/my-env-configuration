call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'

Plug 'tpope/vim-fugitive'
" You can jump between hunks with [c and ]c.
" You can preview, stage, and undo hunks with 
" <leader>hp, <leader>hs, and <leader>hu respectively.
Plug 'airblade/vim-gitgutter'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'

" commenter: \cc \cu, toggle comment \c<space>
Plug 'scrooloose/nerdcommenter'

" provides mappings to easily delete, change and add 
" such surroundings in pairs.
Plug 'tpope/vim-surround'

"used for locating files, buffers, mrus, tags in large project
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

Plug 'mattn/emmet-vim'
Plug 'ternjs/tern_for_vim'
Plug 'pangloss/vim-javascript'
Plug 'hail2u/vim-css3-syntax'
Plug 'ruanyl/vim-fixmyjs'

" autocomplete and code snippets
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'

" provide multiple line edit
Plug 'terryma/vim-multiple-cursors'

" provide linting
Plug 'w0rp/ale'

" Displaying thin vertical lines at each indentation level 
" for code indented with spaces
Plug 'Yggdroot/indentLine'
call plug#end()

let g:airline_powerline_fonts = 1
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1
let g:airline_detect_crypt = 1
let g:airline_detect_spell = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = 'ÓÇ∞'
let g:airline#extensions#tabline#left_alt_sep = 'ÓÇ±'
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'

"define airline sysmbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.branch = 'ÓÇ†'

let NERDTreeShowHidden=1
let NERDTreeWinSize=40
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
let g:nerdtree_tabs_open_on_console_startup=1
let g:NERDTreeIndicatorMapCustom = {
  \ "Modified"  : "‚úπ",
  \ "Staged"    : "‚úö",
  \ "Untracked" : "‚ú≠",
  \ "Renamed"   : "‚ûú",
  \ "Unmerged"  : "‚ïê",
  \ "Deleted"   : "‚úñ",
  \ "Dirty"     : "‚úó",
  \ "Clean"     : "‚úîÔ∏é",
  \ "Unknown"   : "?"
  \ }
map <F2> :NERDTreeToggle<CR>

let javascript_enable_domhtmlcss = 1

" LeaderF settings
let g:Lf_WindowPosition='right'
let g:Lf_WindowHeight=0.30
let g:Lf_PreviewResult = {'Function':0, 'Colorscheme':1}

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" ale setting
let g:ale_sign_error = '‚úñ'
let g:ale_sign_warning = '‚ûú'
let g:ale_sign_column_always = 1
let g:ale_keep_list_window_open = 1
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%] %code%: %s [%severity%]'

" indentline setting
let g:indentLine_leadingSpaceEnabled = 1

"  gitgutter setting
set updatetime=500
set signcolumn=yes

